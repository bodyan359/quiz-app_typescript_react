{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","img/background.png","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","index","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BackgroundImage","App","React","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","console","log","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a0c2366.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & {\r\n  answers: string[];\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&$difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AnswerObject} from '../App';\r\nimport  { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: any; // (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNr, totalQuestions }) => {\r\n    return <Wrapper> \r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML= {{__html: question}}/>\r\n        <div>\r\n            {answers.map((answer,index) => (\r\n                <ButtonWrapper \r\n                key={index}\r\n                correct = {userAnswer?.correctAnswer === answer}\r\n                userClicked={userAnswer?.answer === answer}\r\n                >\r\n\r\n                    <button  disabled={!!userAnswer} value={answer} onClick={callback}> \r\n                        <span dangerouslySetInnerHTML={{ __html: answer }}/>\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n}\r\n\r\nexport default QuestionCard;","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","export default __webpack_public_path__ + \"static/media/background.21b2712f.png\";","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport BackgroundImage from \"./img/background.png\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BackgroundImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React from 'react';\nimport QuestiongCard from './components/QuestionCard';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './API';\nimport  { GlobalStyle, Wrapper } from './App.styles';\n\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nfunction App() {\n  const [loading, setLoading] = React.useState(false);\n  const [questions, setQuestions] = React.useState<QuestionState[]>([]);\n  const [number, setNumber] = React.useState(0);\n  const [userAnswers, setUserAnswers] = React.useState<AnswerObject[]>([]);\n  const [score, setScore] = React.useState(0);\n  const [gameOver, setGameOver] = React.useState(true);\n\n  // console.log(questions);\n\n  const startQuiz = async () => {\n      setLoading(true);\n      setGameOver(false);\n\n      try {\n        const newQuestions = await fetchQuizQuestions(\n          TOTAL_QUESTIONS,\n          Difficulty.EASY\n        );\n  \n        setQuestions(newQuestions);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);\n      }\n      catch(e) {\n        console.log(e);\n        console.log('error');\n      }\n\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if(correct)\n        setScore(prev => prev +1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number +1;\n\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n};\n\n  return (\n    <> \n    <GlobalStyle />\n      <Wrapper>\n    <div className=\"App\">\n        <h1>TypeScript React Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n        <button className=\"start\" onClick={startQuiz}>\n          Start\n        </button>\n         : null}\n        {!gameOver && <p className=\"score\">Score: {score}</p>}\n\n        {loading && <p>Loading...</p> }\n        {!loading && !gameOver ? (\n        <QuestiongCard \n        questionNr={number+1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number]: undefined}\n        callback={checkAnswer}\n        />\n        ): null}\n        {!gameOver && !loading && userAnswers.length === number +1 && number !== TOTAL_QUESTIONS-1 ?\n        (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next\n        </button>\n       ):null}  \n    </div>\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}